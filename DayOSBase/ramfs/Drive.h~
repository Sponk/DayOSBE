#ifndef DRIVE_H
#define DRIVE_H

#include <string>
#include <sys/types.h>
#include <sys/stat.h>
#include <vfs.h>
#include <map>
#include <dayos.h>

enum NODE_TYPE
{
	GENERAL_NODE = 0,
	FILE_NODE,
	DIRECTORY_NODE
};

class Node
{
public:
	std::string name;
    struct stat info;

	virtual NODE_TYPE getType() = 0;
};

class File : public Node
{
public:
	~File() { delete content; }
	char* content;

	virtual NODE_TYPE getType() { return FILE_NODE; }

	void write(void* data, size_t sz, size_t offset);
	size_t read(void* data, size_t sz, size_t offset);
};

class Directory : public Node
{
private:
	std::map<std::string, Node*> content;

public:
	
	virtual NODE_TYPE getType() { return DIRECTORY_NODE; }
	
	Node* find(std::string::iterator name, std::string& full);
	Node* find(const char* file)
	{
		std::string str(file);
		return find(str.begin(), str);
	}
	
	Directory* mkdir(const char* name)
	{
		Directory* dir = new Directory();
		content[name] = dir;
		return dir;
	}

	File* open(const char* name, VFS_OPEN_MODES mode);
};

class Drive
{
	Directory root;
public:
	Drive() { root.name = "/"; }
	File* open(vfs_request& rq);
	int read(vfs_request& rq);
	int write(vfs_request& rq);

	Directory* opendir(vfs_request& rq);
	Directory* readdir(vfs_request& rq);
	Directory* getRoot() { return &root; }
};

#endif
